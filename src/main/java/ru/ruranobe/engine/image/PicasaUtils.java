package ru.ruranobe.engine.image;

import com.google.gdata.data.DateTime;
import com.google.gdata.client.photos.PicasawebService;
import com.google.gdata.data.Link;
import com.google.gdata.data.PlainTextConstruct;
import com.google.gdata.data.media.MediaFileSource;
import com.google.gdata.data.photos.AlbumEntry;
import com.google.gdata.data.photos.GphotoEntry;
import com.google.gdata.data.photos.PhotoEntry;
import com.google.gdata.data.photos.UserFeed;
import com.google.gdata.util.AuthenticationException;
import com.google.gdata.util.ServiceException;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.util.*;
import org.apache.wicket.util.string.Strings;

public class PicasaUtils 
{
    
    static List<AlbumEntry> getAlbums() throws ServiceException, IOException
    {
        String albumUrl = API_PREFIX + USERNAME;
        UserFeed userFeed = PICASA_WEBSERVICE.getFeed(new URL(albumUrl), UserFeed.class);

        List<GphotoEntry> entries = userFeed.getEntries();
        List<AlbumEntry> albums = new ArrayList<AlbumEntry>();
        for (GphotoEntry entry : entries)
        {
            GphotoEntry adapted = entry.getAdaptedEntry();
            if (adapted instanceof AlbumEntry)
            {
                albums.add((AlbumEntry) adapted);
            }
        }
        return albums;
    }
    
    static <T extends GphotoEntry> T insert(GphotoEntry<?> parent, T entry)
            throws IOException, ServiceException
    {
        String feedUrl = getLinkByRel(parent.getLinks(), Link.Rel.FEED);
        return PICASA_WEBSERVICE.insert(new URL(feedUrl), entry);
    }

    static String getLinkByRel(List<Link> links, String relValue)
    {
        for (Link link : links)
        {
            if (relValue.equals(link.getRel()))
            {
                return link.getHref();
            }
        }
        throw new IllegalArgumentException("Missing " + relValue + " link.");
    }
    
    public static synchronized String uploadImage(File image, String mimeType, String imageTitle, String albumTitle) 
    {
        if (!(Strings.isEmpty(albumTitle)))
        {
            albumTitle = "unsorted";
        }
        if (!ALBUM_TITLE_TO_ALBUM_ENTRY.containsKey(albumTitle))
        {
            try
            {
                insertAlbum(albumTitle);
            }
            catch (Exception ex1)
            {
                reloadCache();
                try
                {
                    insertAlbum(albumTitle);
                }
                catch (Exception ex2)
                {
                    throw new RuntimeException(ex2);
                }
            }
        }
        PhotoEntry photoEntry = new PhotoEntry();
        photoEntry.setTitle(new PlainTextConstruct(imageTitle));
        MediaFileSource mediaFileSource = new MediaFileSource(image, mimeType);
        photoEntry.setMediaSource(mediaFileSource);
        photoEntry.setAlbumAccess(API_PREFIX);
        try
        {
            photoEntry = PICASA_WEBSERVICE.insert(new URL(API_PREFIX + albumTitle), photoEntry);
        }
        catch (Exception ex1)
        {
            reloadCache();
            try
            {
                photoEntry = PICASA_WEBSERVICE.insert(new URL(API_PREFIX + albumTitle), photoEntry);
            }
            catch (Exception ex2)
            {
                throw new RuntimeException(ex2);
            }
        }
        return photoEntry.getMediaThumbnails().get(0).getUrl();
    }
    
    private static AlbumEntry insertAlbum(String albumTitle) throws IOException, ServiceException
    {
        AlbumEntry albumEntry = new AlbumEntry();
        albumEntry.setPublished(new DateTime(System.currentTimeMillis())); 
        albumEntry.setDate(new Date(System.currentTimeMillis()));
        albumEntry.setAccess("private");
        albumEntry.setTitle(new PlainTextConstruct(albumTitle));
        albumEntry.setDescription(new PlainTextConstruct("autogenerated"));
        String feedUrl = API_PREFIX + "default";
        albumEntry = PICASA_WEBSERVICE.insert(new URL(feedUrl), albumEntry);
        ALBUM_TITLE_TO_ALBUM_ENTRY.put(albumTitle, albumEntry);
        return albumEntry;
    }
    
    private static void reloadCache()
    {
        ALBUM_TITLE_TO_ALBUM_ENTRY = new HashMap<String, AlbumEntry>();
        try
        {
            List<AlbumEntry> albums = getAlbums();
            for (AlbumEntry entry: albums)
            {
                ALBUM_TITLE_TO_ALBUM_ENTRY.put(entry.getTitle().getPlainText(), entry);
            }
            if (!ALBUM_TITLE_TO_ALBUM_ENTRY.containsKey("unsorted"))
            {
                ALBUM_TITLE_TO_ALBUM_ENTRY.put("unsorted", insertAlbum("unsorted"));
            }
        }
        catch (IOException ex)
        {
            throw new RuntimeException(ex);
        }
        catch (ServiceException ex)
        {
            throw new RuntimeException(ex);
        }
    }
    
    private static final String USERNAME = "ruranobe";
    private static final PicasawebService PICASA_WEBSERVICE = new PicasawebService(USERNAME);
    private static final String API_PREFIX = "https://picasaweb.google.com/data/feed/api/user/";
    private static Map<String, AlbumEntry> ALBUM_TITLE_TO_ALBUM_ENTRY;
    
    static
    {
        try
        {
            PICASA_WEBSERVICE.setUserCredentials("ruranobe@gmail.com", "1qa2ws3ed4rf5tg6yh");
        } 
        catch (AuthenticationException e)
        {
            throw new IllegalArgumentException("Illegal username/password combination.");
        }
        
        reloadCache();
    }
}
